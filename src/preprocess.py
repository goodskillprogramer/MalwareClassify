import os
import time
import json
import traceback

from conf import STORAGE
from utility import write_to_file,read_replace,get_replace_type_name


def load_file(filepath):
    """load the file change the all the row to json format"""
    stime=time.time()
    document={}
    if not os.path.exists(filepath):
        print('file not exits',filepath)
        return
    with open(filepath,'r') as f:
        for line in f:        
            line=line.strip('\n')
            if line:
                splits = line.split(',')
                fileid =int(splits[0])
                lable=int(splits[1])
                funcname=splits[2]
                tid=splits[3]
                rtnvalue=splits[4]
                index=splits[5]

                if 'threads' not in document:
                    document['threads']={}
                    document['file_id']=fileid
                    document['lable']=lable
                if tid not in document['threads']:
                    document['threads'][tid]={'api_calls':[]}
                document['threads'][tid]['api_calls'].append([index,funcname,rtnvalue])
    for tid in document['threads']:
        apicalls = document['threads'][tid]['api_calls']
        sortedcalls = sorted(apicalls,key=lambda s: int(s[0]))
        document['threads'][tid]['api_calls'] = sortedcalls

    return document


def load_test_file(filepath):

    stime=time.time()
    document={}
    if not os.path.exists(filepath):
        print('file not exits',filepath)
        return
    with open(filepath,'r') as f:
        for line in f:        
            line=line.strip('\n')
            if line:
                splits = line.split(',')
                fileid =int(splits[0])               
                funcname=splits[1]
                tid=splits[2]
                rtnvalue=splits[3]
                index=splits[4]

                if 'threads' not in document:
                    document['threads']={}
                    document['file_id']=fileid

                if tid not in document['threads']:
                    document['threads'][tid]={'api_calls':[]}
                document['threads'][tid]['api_calls'].append([index,funcname,rtnvalue])
    for tid in document['threads']:
        apicalls = document['threads'][tid]['api_calls']
        sortedcalls = sorted(apicalls,key=lambda s: int(s[0]))
        document['threads'][tid]['api_calls'] = sortedcalls

    return document

def train_json_to_txt():

    folder=os.path.join(STORAGE,'train_json')
    save_apicalls=os.path.join(STORAGE,'apicall.txt')
    save_rtvalue=os.path.join(STORAGE,'rtvalue.txt')
    
    write_to_file(save_apicalls, '',mode='w+')
    write_to_file(save_rtvalue, '',mode='w+')
    

    for subfolder in os.listdir(folder):
        fullsubfolder = os.path.join(folder,subfolder)        
        for fname in os.listdir(fullsubfolder):
            fullname=os.path.join(fullsubfolder,fname)
            with open(fullname) as f:
                jsondata = json.load(f)
                common=[str(jsondata['file_id']),str(jsondata['lable'])]
                apis=[]
                rtns=[]
                for tid in jsondata['threads']:
                    
                    api_calls = jsondata['threads'][tid]['api_calls']
                    
                    apis+=[apicall[1] for apicall in api_calls]
                    rtns+=[apicall[2] for apicall in api_calls]
                    
                    apis+=['.']
                    rtns+=['.']
                    
                txt=' '.join(apis)
                txt=','.join(common+[txt])
                write_to_file(save_apicalls, txt+'\n')
                
                txt =' '.join(rtns)
                txt=','.join(common+[txt])
                
                write_to_file(save_rtvalue, txt+'\n')
                
                
def test_json_to_txt():

    folder=os.path.join(STORAGE,'test_json')    
    save_apicalls=os.path.join(STORAGE,'test_apicall.txt')
    save_rtvalue=os.path.join(STORAGE,'test_rtvalue.txt')
    
    write_to_file(save_apicalls, '',mode='w+')
    write_to_file(save_rtvalue, '',mode='w+')
    
    for subfolder in os.listdir(folder):
        fullsubfolder = os.path.join(folder,subfolder)        
        for fname in os.listdir(fullsubfolder):
            fullname=os.path.join(fullsubfolder,fname)
            with open(fullname) as f:
                jsondata = json.load(f)
                common=[str(jsondata['file_id'])]
                apis=[]
                rtns=[]
                for tid in jsondata['threads']:
                    
                    api_calls = jsondata['threads'][tid]['api_calls']
                    apis+=[apicall[1] for apicall in api_calls]
                    rtns+=[apicall[2] for apicall in api_calls]
                    
                    apis+=['.']
                    rtns+=['.']
                    
                txt=' '.join(apis)
                txt=','.join(common+[txt])
                write_to_file(save_apicalls, txt+'\n',mode='a+')
                
                txt =' '.join(rtns)
                txt=','.join(common+[txt])
                
                write_to_file(save_rtvalue, txt+'\n',mode='a+')
                
def train_json_to_txt_type(replacedic):

    folder=os.path.join(STORAGE,'train_json')
    save_apicalls=os.path.join(STORAGE,'apicall.type.txt')
    
    write_to_file(save_apicalls, '',mode='w+')

    for subfolder in os.listdir(folder):
        fullsubfolder = os.path.join(folder,subfolder)        
        for fname in os.listdir(fullsubfolder):
            fullname=os.path.join(fullsubfolder,fname)
            with open(fullname) as f:
                jsondata = json.load(f)
                common=[str(jsondata['file_id']),str(jsondata['lable'])]
                apis=[]
                rtns=[]
                for tid in jsondata['threads']:
                    
                    api_calls = jsondata['threads'][tid]['api_calls']
                    
                    apis+=[get_replace_type_name(apicall[1],replacedic) for apicall in api_calls]
                    rtns+=[apicall[2] for apicall in api_calls]
                    
                    apis+=['.']
                    rtns+=['.']
                    
                txt=' '.join(apis)
                txt=','.join(common+[txt])
                write_to_file(save_apicalls, txt+'\n')
                
                txt =' '.join(rtns)
                txt=','.join(common+[txt])
                
                
def test_json_to_txt_type(replacedic):

    folder=os.path.join(STORAGE,'test_json')
    
    save_apicalls=os.path.join(STORAGE,'test_apicall.type.txt')
    
    write_to_file(save_apicalls, '',mode='w+')
    
    for subfolder in os.listdir(folder):
        fullsubfolder = os.path.join(folder,subfolder)        
        for fname in os.listdir(fullsubfolder):
            fullname=os.path.join(fullsubfolder,fname)
            with open(fullname) as f:
                jsondata = json.load(f)
                common=[str(jsondata['file_id'])]
                apis=[]
                rtns=[]
                for tid in jsondata['threads']:
                    
                    api_calls = jsondata['threads'][tid]['api_calls']
                    apis+=[get_replace_type_name(apicall[1],replacedic) for apicall in api_calls]
                    rtns+=[apicall[2] for apicall in api_calls]
                    
                    apis+=['.']
                    rtns+=['.']
                    
                txt=' '.join(apis)
                txt=','.join(common+[txt])
                write_to_file(save_apicalls, txt+'\n',mode='a+')
                
                txt =' '.join(rtns)
                txt=','.join(common+[txt])
    
def folder_to_json(folder,fileparser,save_folder):
    stime=time.time()
    count=0
    for subfolder in os.listdir(folder):
        fullsubfolder = os.path.join(folder,subfolder)        
        save_subfolder = os.path.join(save_folder,subfolder)
        os.makedirs(save_subfolder,exist_ok=True)
        for fname in os.listdir(fullsubfolder):
            try:
                fullname=os.path.join(save_subfolder,fname)
                document = fileparser(fullname)                          
                txt = json.dumps(document)                
                write_to_file(fullname,txt,mode='a+')
                count+=1
                if count%1000==0:
                    print(count)
            except Exception as e:
                traceback.print_exc()
                print(fullname)
        
    print(time.time()-stime,count)
    
def train_json_to_txt_merge():
    """json file to rtn_api sequence"""

    folder=os.path.join(STORAGE,'train_json')
    save_rtn_apicalls=os.path.join(STORAGE,'rtnvalue_apicall.txt')
    
    write_to_file(save_rtn_apicalls, '',mode='w+')
#     write_to_file(save_rtn_apicalls, ['file_id','label','text'],mode='a+')
    for subfolder in os.listdir(folder):
        fullsubfolder = os.path.join(folder,subfolder)        
        for fname in os.listdir(fullsubfolder):
            fullname=os.path.join(fullsubfolder,fname)
            with open(fullname) as f:
                jsondata = json.load(f)
                common=[str(jsondata['file_id']),str(jsondata['lable'])]

                rtn_apis=[]
                for tid in jsondata['threads']:                    
                    api_calls = jsondata['threads'][tid]['api_calls']
                    rtn_apis+=[apicall[2]+'_'+apicall[1]  for apicall in api_calls]                    
                    rtn_apis+=['.']
                    
                txt=' '.join(rtn_apis)
                txt=','.join(common+[txt])
                write_to_file(save_rtn_apicalls, txt+'\n')
                
def test_json_to_txt_merge():
    """json file to rtn_api sequence"""

    folder=os.path.join(STORAGE,'test_json')
    save_rtn_apicalls=os.path.join(STORAGE,'test_rtnvalue_apicall.txt')
    
    write_to_file(save_rtn_apicalls, '',mode='w+')
    
    for subfolder in os.listdir(folder):
        fullsubfolder = os.path.join(folder,subfolder)        
        for fname in os.listdir(fullsubfolder):
            fullname=os.path.join(fullsubfolder,fname)
            with open(fullname) as f:
                jsondata = json.load(f)
                common=[str(jsondata['file_id'])]

                rtn_apis=[]
                for tid in jsondata['threads']:                    
                    api_calls = jsondata['threads'][tid]['api_calls']
                    rtn_apis+=[apicall[2]+'_'+apicall[1]  for apicall in api_calls]                    
                    rtn_apis+=['.']
                    
                txt=' '.join(rtn_apis)
                txt=','.join(common+[txt])
                write_to_file(save_rtn_apicalls, txt+'\n',mode='a+')
                
def main():

    replacedic = read_replace('./funcname_type_map.json')

    folder_to_json(os.path.join(STORAGE,'train_flat'),
                   load_test_file,
                   os.path.join(STORAGE,'train_json'))
    
    folder_to_json(os.path.join(STORAGE,'test_flat'),
                   load_test_file,
                   os.path.join(STORAGE,'test_json'))
    
    train_json_to_txt()
    test_json_to_txt()
    
    train_json_to_txt_merge()
    test_json_to_txt_merge()
    
    train_json_to_txt_type(replacedic)
    test_json_to_txt_type(replacedic)

        
if __name__=="__main__":
    main()