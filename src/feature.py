import os
import time

import pandas as pd

from conf import STORAGE
from utility import write_to_file,load_model


def load_documents(document_save_path):
    
    dataset = pd.read_csv(document_save_path,names=['file_id','txt'],nrows = None)
    
    labels = []
    docs = []
    filesid=[]
    
    for index,row in dataset.iterrows():
#         label = row['lable']
        content = row['txt']
        fileid = row['file_id']
        labels.append(-1)
        docs.append(content)
        filesid.append(fileid)
        
    return labels,docs,filesid

def load_train_documents(document_save_path):
    
    dataset = pd.read_csv(document_save_path,names=['file_id','label','txt'],nrows = None)
    
    labels = []
    docs = []
    filesid=[]
    
    for index,row in dataset.iterrows():
        label = row['label']
        content = row['txt']
        fileid = row['file_id']
        labels.append(label)
        docs.append(content)
        filesid.append(fileid)
        
    return labels,docs,filesid


def funcname23_tfidf_feature(document_apicall_save_path,newsavepath,loadfunc):
    
    if os.path.exists(newsavepath):
        print('Exists',newsavepath)
        return
    
    tfidf_save_path = os.path.join(STORAGE,'apicall_tfidf/webpage.tfidf.model')
#     pca_save_path = os.path.join(STORAGE,'apicall_tfidf_2_3_50000/webpage.tfidf.pca.model')

    rawy ,raw_documents,filesid = loadfunc(document_apicall_save_path)

    print(time.asctime(),len(rawy),len(raw_documents))
   
    model = load_model(tfidf_save_path)
    
    x = model.transform(raw_documents)   
    
    samples,feautre = x.shape
    
    write_to_file(newsavepath, '', mode='w+')
    
    headers=['file_id','label']
    headers+=model.get_feature_names()
    txt =','.join(headers)
    txt+='\n'
    write_to_file(newsavepath,txt,mode='a+')
    
    for i in range(samples):
        
        attr = [str(filesid[i]),str(rawy[i])]
                
        feature = x[i].toarray()[0]
#         print(feature.shape)
        attr += [str(f)  for f in feature]
        txt=','.join(attr)
        txt+='\n'
        write_to_file(newsavepath, txt, mode='a+')
        
def api_type_tfidf_feature(document_apicall_save_path,newsavepath,loadfunc):
    
    if os.path.exists(newsavepath):
        print('Exists',newsavepath)
        return
    
    tfidf_save_path = os.path.join(STORAGE,'api_type_tfidf_5/webpage.tfidf.model')
#     pca_save_path = os.path.join(STORAGE,'apicall_tfidf_2_3_50000/webpage.tfidf.pca.model')

    rawy ,raw_documents,filesid = loadfunc(document_apicall_save_path)

    print(time.asctime(),len(rawy),len(raw_documents))
   
    model = load_model(tfidf_save_path)
    
    x = model.transform(raw_documents)   
    
    samples,feautre = x.shape
    
    write_to_file(newsavepath, '', mode='w+')
    
    headers=['file_id','label']
    headers+=model.get_feature_names()
    txt =','.join(headers)
    txt+='\n'
    write_to_file(newsavepath,txt,mode='a+')
    
    for i in range(samples):
        
        attr = [str(filesid[i]),str(rawy[i])]
                
        feature = x[i].toarray()[0]
#         print(feature.shape)
        attr += [str(f)  for f in feature]
        txt=','.join(attr)
        txt+='\n'
        write_to_file(newsavepath, txt, mode='a+')	
        	
def rtn_funcname_tfidf_feature(document_apicall_save_path,newsavepath,loadfunc):
    
    if os.path.exists(newsavepath):
        print('Exists',newsavepath)
        return
    
    tfidf_save_path = os.path.join(STORAGE,'rtn_apicall_tfidf/webpage.tfidf.model')

    rawy ,raw_documents,filesid = loadfunc(document_apicall_save_path)

    print(time.asctime(),len(rawy),len(raw_documents))
   
    model = load_model(tfidf_save_path)
    
    x = model.transform(raw_documents)   
    
    samples,feautre = x.shape
    
    write_to_file(newsavepath, '', mode='w+')
    
    headers=['file_id','label']
    headers+=model.get_feature_names()
    txt =','.join(headers)
    txt+='\n'
    write_to_file(newsavepath,txt,mode='a+')
    
    for i in range(samples):
        
        attr = [str(filesid[i]),str(rawy[i])]
                
        feature = x[i].toarray()[0]
#         print(feature.shape)
        attr += [str(f)  for f in feature]
        txt=','.join(attr)
        txt+='\n'
        write_to_file(newsavepath, txt, mode='a+')
        
def funcname1_tfidf_feature(document_apicall_save_path,newsavepath,loadfunc):

    if os.path.exists(newsavepath):
        print('Exists',newsavepath)
        return
        
    tfidf_save_path = os.path.join(STORAGE,'apicall_tfidf_1/webpage.tfidf.model')

    rawy ,raw_documents,filesid = loadfunc(document_apicall_save_path)

    print(time.asctime(),len(rawy),len(raw_documents))
   
    model = load_model(tfidf_save_path)
    
    x = model.transform(raw_documents)   
    
    samples,feautre = x.shape
    
    write_to_file(newsavepath, '', mode='w+')
    
    headers=['file_id','label']
    headers+=model.get_feature_names()
    txt =','.join(headers)
    txt+='\n'
    write_to_file(newsavepath,txt,mode='a+')
    
    for i in range(samples):
        
        attr = [str(filesid[i]),str(rawy[i])]
                
        feature = x[i].toarray()[0]
#         print(feature.shape)
        attr += [str(f)  for f in feature]
        txt=','.join(attr)
        txt+='\n'
        write_to_file(newsavepath, txt, mode='a+')

def rtvalue_tfidf_feature(document_rtnvalue_save_path,newsavepath,loadfunc):
    
    if os.path.exists(newsavepath):
        print('Exists',newsavepath)
        return

    tfidf_save_path = os.path.join(STORAGE,'rtnvalue_tfidf/webpage.tfidf.model')
   
    rawy ,raw_documents,filesid = loadfunc(document_rtnvalue_save_path)

    print(time.asctime(),len(rawy),len(raw_documents))
   
    model = load_model(tfidf_save_path)
    
    x = model.transform(raw_documents)   
    
    samples,feautre = x.shape
    
    write_to_file(newsavepath, '', mode='w+')
    
    headers=['file_id','label']
    
    headers+=model.get_feature_names()
    
    txt =','.join(headers)
    txt+='\n'
    
    write_to_file(newsavepath,txt,mode='a+')
    
    for i in range(samples):
        
        attr = [str(filesid[i]),str(rawy[i])]
                
        feature = x[i].toarray()[0]

        attr += [str(f)  for f in feature]
        txt=','.join(attr)
        txt+='\n'
        write_to_file(newsavepath, txt, mode='a+')
    
def feature_merge(merge_save_path,selected_save_path,webpage_vectore_save_path):
    
    if os.path.exists(merge_save_path):
        print('Exists',merge_save_path)
        return True
     
    txt = 'merge from {} {} to merge_save_path {}'.format(selected_save_path,webpage_vectore_save_path,merge_save_path)
    print(txt)
    selected_feature_set = pd.read_csv(selected_save_path,encoding='utf-8')
    txt_feature_set = pd.read_csv(webpage_vectore_save_path,encoding='utf-8')
    print('finish reading the two csv file .merging...')
    merge = pd.merge(selected_feature_set,txt_feature_set,on=['file_id'])
    print('finish merging,export to csv..')
    merge.to_csv(merge_save_path,index=False,encoding='utf-8')
    
def test_data():
    document_apicall_save_path=os.path.join(STORAGE,'test_apicall.txt')
    document_rtnvalue_save_path=os.path.join(STORAGE,'test_rtvalue.txt')
    document_rtnvalue_api_save_path=os.path.join(STORAGE,'test_rtnvalue_apicall.txt')

    document_api_type_save_path=os.path.join(STORAGE,'test_apicall.type.txt')
    
    
    funcname1_tfidf_savepath = os.path.join(STORAGE,'testdata/funcname1.tfidf.csv')
    funcname23_tfidf_savepath = os.path.join(STORAGE,'testdata/funcname23.tfidf.csv')
    rtn_tfidf_savepath = os.path.join(STORAGE,'testdata/rtn.tfidf.csv')    
    basicfeature = os.path.join(STORAGE,'testdata/basicfeature.csv')
    rtn_funcname_tfidf_savepath = os.path.join(STORAGE,'testdata/rtnfuncname.tfidf.csv')
    apitype_tfidf_savepath = os.path.join(STORAGE,'testdata/apitype.tfidf.csv')
    
    funcname1_tfidf_feature(document_apicall_save_path,funcname1_tfidf_savepath,load_documents)
    rtvalue_tfidf_feature(document_rtnvalue_save_path,rtn_tfidf_savepath,load_documents)
    funcname23_tfidf_feature(document_apicall_save_path,funcname23_tfidf_savepath,load_documents)
    rtn_funcname_tfidf_feature(document_rtnvalue_api_save_path,rtn_funcname_tfidf_savepath,load_documents)
    api_type_tfidf_feature(document_api_type_save_path,apitype_tfidf_savepath,load_documents)
    
    merge_basic_funcnam1=os.path.join(STORAGE,'testdata/merge.basic.func1.csv')    
    feature_merge(merge_basic_funcnam1,basicfeature,funcname1_tfidf_savepath)
        
    merge_basic_funcnam1_rtnvalue=os.path.join(STORAGE,'testdata/merge.basic.func1.rtnvalue.csv')
    feature_merge(merge_basic_funcnam1_rtnvalue,merge_basic_funcnam1,rtn_tfidf_savepath)
    
    merge_basic_funcnam1_rtnvalue_funcname23=os.path.join(STORAGE,'testdata/merge.basic.func1.rtnvalue.func23.csv')
    feature_merge(merge_basic_funcnam1_rtnvalue_funcname23,merge_basic_funcnam1_rtnvalue,funcname23_tfidf_savepath)
    
    merge_basic_funcnam1_rtnvalue_funcname23_rtnapi_=os.path.join(STORAGE,'testdata/merge.basic.func1.rtnvalue.func23.rtnapi.csv')
    feature_merge(merge_basic_funcnam1_rtnvalue_funcname23_rtnapi_,merge_basic_funcnam1_rtnvalue_funcname23,rtn_funcname_tfidf_savepath)
    
    merge_basic_funcnam1_rtnvalue_funcname23_rtnapi_apitype_=os.path.join(STORAGE,'testdata/merge.basic.func1.rtnvalue.func23.rtnapi.apitype.csv')
    feature_merge(merge_basic_funcnam1_rtnvalue_funcname23_rtnapi_apitype_,merge_basic_funcnam1_rtnvalue_funcname23_rtnapi_,apitype_tfidf_savepath)
    
def train_data():
    document_apicall_save_path=os.path.join(STORAGE,'apicall.txt')
    document_rtnvalue_save_path=os.path.join(STORAGE,'rtvalue.txt')
    document_rtnvalue_api_save_path=os.path.join(STORAGE,'rtnvalue_apicall.txt')
    document_api_type_save_path=os.path.join(STORAGE,'apicall.type.txt')
    
    
    funcname1_tfidf_savepath = os.path.join(STORAGE,'data/funcname1.tfidf.csv')
    funcname23_tfidf_savepath = os.path.join(STORAGE,'data/funcname23.tfidf.csv')
    rtn_funcname_tfidf_savepath = os.path.join(STORAGE,'data/rtnfuncname.tfidf.csv')
    rtn_tfidf_savepath = os.path.join(STORAGE,'data/rtn.tfidf.csv')    
    basicfeature = os.path.join(STORAGE,'data/basicfeature.csv')
    apitype_tfidf_savepath = os.path.join(STORAGE,'data/apitype.tfidf.csv')
    
    
    funcname1_tfidf_feature(document_apicall_save_path,funcname1_tfidf_savepath,load_train_documents)
    rtvalue_tfidf_feature(document_rtnvalue_save_path,rtn_tfidf_savepath,load_train_documents)
    funcname23_tfidf_feature(document_apicall_save_path,funcname23_tfidf_savepath,load_train_documents)
    rtn_funcname_tfidf_feature(document_rtnvalue_api_save_path,rtn_funcname_tfidf_savepath,load_train_documents)
    api_type_tfidf_feature(document_api_type_save_path,apitype_tfidf_savepath,load_train_documents)
    
    
    merge_basic_funcnam1=os.path.join(STORAGE,'data/merge.basic.func1.csv')    
    feature_merge(merge_basic_funcnam1,basicfeature,funcname1_tfidf_savepath)
        
    merge_basic_funcnam1_rtnvalue=os.path.join(STORAGE,'data/merge.basic.func1.rtnvalue.csv')
    feature_merge(merge_basic_funcnam1_rtnvalue,merge_basic_funcnam1,rtn_tfidf_savepath)
    
    merge_basic_funcnam1_rtnvalue_funcname23=os.path.join(STORAGE,'data/merge.basic.func1.rtnvalue.func23.csv')
    feature_merge(merge_basic_funcnam1_rtnvalue_funcname23,merge_basic_funcnam1_rtnvalue,funcname23_tfidf_savepath)
    
    merge_basic_funcnam1_rtnvalue_funcname23_rtnapi_=os.path.join(STORAGE,'data/merge.basic.func1.rtnvalue.func23.rtnapi.csv')
    feature_merge(merge_basic_funcnam1_rtnvalue_funcname23_rtnapi_,merge_basic_funcnam1_rtnvalue_funcname23,rtn_funcname_tfidf_savepath)
    
    
    merge_basic_funcnam1_rtnvalue_funcname23_rtnapi_apitype_=os.path.join(STORAGE,'data/merge.basic.func1.rtnvalue.func23.rtnapi.apitype.csv')
    feature_merge(merge_basic_funcnam1_rtnvalue_funcname23_rtnapi_apitype_,merge_basic_funcnam1_rtnvalue_funcname23_rtnapi_,apitype_tfidf_savepath)
    
def main():    
    train_data()
    test_data()  

if __name__ == "__main__":

    main()
    
    
    