import os
import pandas as pd
from conf import STORAGE

from utility import load_model, write_to_file

def load_data(savepath,featureheaders,targethearders,nrows=None):
    
    dataset = pd.read_csv(savepath,header = 0,nrows =nrows)
    
    x = dataset[featureheaders]
    y = dataset[targethearders]
    l =dataset['label_x']
    
    return x.values,y.values.reshape((len(y.values),)),l.values.reshape((len(y.values),))

def main():

    modelsavepath=os.path.join(STORAGE,'model/lightgbm.model')
    
    clf =  load_model(modelsavepath)

    rtn_tfidf_save_path = os.path.join(STORAGE,'rtnvalue_tfidf/webpage.tfidf.model')    
    func1_tfidf_save_path = os.path.join(STORAGE,'apicall_tfidf_1/webpage.tfidf.model')
    func23_tfidf_save_path = os.path.join(STORAGE,'apicall_tfidf/webpage.tfidf.model')    
    rtn_apicall_tfidf_save_path = os.path.join(STORAGE,'rtn_apicall_tfidf/webpage.tfidf.model')    
    apitype_save_path = os.path.join(STORAGE,'api_type_tfidf_5/webpage.tfidf.model')

    
    featureheaders = [
                                     
                    ]
    
    basicfeature = [
                      'threadnum',
                      'totalapicall',
                      'maxapicall',
                      'minapicall',
                      'meanapicallperthread'                  
                    ]
     
    featureheaders+=basicfeature
     
    model = load_model(func1_tfidf_save_path)
     
    featureheaders += model.get_feature_names()
     
    model = load_model(rtn_tfidf_save_path)
     
    featureheaders += model.get_feature_names()
     
    model = load_model(func23_tfidf_save_path)
     
    featureheaders += model.get_feature_names()
     
    model = load_model(rtn_apicall_tfidf_save_path)
     
    featureheaders += model.get_feature_names()
    
    model = load_model(apitype_save_path)
     
    featureheaders += model.get_feature_names()

    targethearders=['file_id']
    
    x,file_ids,labels = load_data(os.path.join(STORAGE,'testdata/merge.basic.func1.rtnvalue.func23.rtnapi.apitype.csv'),
                    featureheaders,
                    targethearders)

    x_test_proba = clf.predict(x)#predict_proba
    
    samples,probas = x_test_proba.shape
    
    print('shape of x_test_proba.shape',x_test_proba.shape)
    
    predict_save_path = os.path.join(STORAGE,'test_predict.lightgbm.csv')
    
    write_to_file(predict_save_path,'',mode='w+')
    
    txt='{},{},{},{},{},{},{}\n'.format('file_id','prob0','prob1','prob2','prob3','prob4','prob5')
    
    write_to_file(predict_save_path,txt,mode='w+')
    
    
    for i in range(samples):
        attr=[str(file_ids[i])]
        attr+=[str(p) for p in x_test_proba[i]]
#         attr+=[str(labels[i])]
        txt=','.join(attr)
        write_to_file(predict_save_path,txt+'\n',mode='a+')

    
if __name__ =="__main__":
    main()